#include <math.h>
#include <memory>
#include <iostream>

const int nInts = 16;
const int nOuts = 141;
std::vector<int> intLengths{ 8, 5, 12, 13, 13, 9, 6, 9, 10, 8, 7, 11, 8, 5, 5, 12 };
std::vector< std::vector< std::vector<int> > > decoders{ { { 5, 1, 64 }, { 5, 1, 63 }, { 4, 1, 62 }, { 6, 1, 101 }, { 5, 1, 60 }, { 147, 1, 0 }, { 147, 1, 8 }, { 60, 1, 20 } }, { { 60, 1, 26 }, { 147, 1, 7 }, { 147, 1, 1 }, { 100, 1, 49 }, { 30, 1, 130 } }, { { 5, 1, 96 }, { 5, 1, 95 }, { 100, 1, 48 }, { 6, 1, 80 }, { 5, 1, 79 }, { 5, 1, 78 }, { 5, 1, 77 }, { 4, 1, 76 }, { 5, 1, 75 }, { 3, 1, 131 }, { 6, 1, 31 }, { 6, 1, 30 } }, { { 4, 1, 90 }, { 5, 1, 65 }, { 5, 1, 99 }, { 3, 1, 132 }, { 6, 1, 87 }, { 5, 1, 86 }, { 5, 1, 85 }, { 5, 1, 84 }, { 4, 1, 83 }, { 6, 1, 94 }, { 5, 1, 81 }, { 12, 1, 51 }, { 12, 1, 50 } }, { { 6, 1, 35 }, { 6, 1, 34 }, { 4, 1, 104 }, { 5, 1, 103 }, { 5, 1, 102 }, { 5, 1, 82 }, { 5, 1, 93 }, { 5, 1, 92 }, { 5, 1, 91 }, { 6, 1, 66 }, { 5, 1, 89 }, { 5, 1, 88 }, { 12, 1, 55 } }, { { 147, 1, 3 }, { 5, 1, 98 }, { 4, 1, 97 }, { 6, 1, 108 }, { 5, 1, 107 }, { 5, 1, 106 }, { 5, 1, 105 }, { 147, 1, 2 }, { 12, 1, 54 } }, { { 70, 1, 133 }, { 100, 1, 44 }, { 100, 1, 47 }, { 100, 1, 46 }, { 12, 1, 57 }, { 5, 1, 134 } }, { { 147, 1, 6 }, { 12, 1, 56 }, { 147, 1, 5 }, { 5, 1, 135 }, { 5, 1, 136 }, { 6, 1, 137 }, { 4, 1, 138 }, { 5, 1, 139 }, { 5, 1, 140 } }, { { 6, 1, 36 }, { 60, 1, 27 }, { 6, 1, 141 }, { 5, 1, 142 }, { 5, 1, 143 }, { 5, 1, 144 }, { 4, 1, 145 }, { 5, 1, 146 }, { 5, 1, 147 }, { 147, 1, 9 } }, { { 100, 1, 45 }, { 24, 1, 148 }, { 60, 1, 149 }, { 2, 1, 150 }, { 4, 1, 151 }, { 5, 1, 61 }, { 5, 1, 100 }, { 147, 1, 4 } }, { { 60, 1, 29 }, { 25, 1, 11 }, { 25, 1, 10 }, { 25, 1, 19 }, { 60, 1, 28 }, { 6, 1, 37 }, { 12, 1, 59 } }, { { 6, 1, 32 }, { 5, 1, 72 }, { 5, 1, 71 }, { 6, 1, 73 }, { 4, 1, 69 }, { 5, 1, 68 }, { 5, 1, 67 }, { 6, 1, 39 }, { 12, 1, 58 }, { 25, 1, 13 }, { 25, 1, 12 } }, { { 6, 1, 33 }, { 5, 1, 70 }, { 6, 1, 38 }, { 60, 1, 21 }, { 25, 1, 17 }, { 25, 1, 16 }, { 25, 1, 15 }, { 25, 1, 14 } }, { { 321, 1, 152 }, { 60, 1, 25 }, { 60, 1, 24 }, { 60, 1, 23 }, { 60, 1, 22 } }, { { 100, 1, 40 }, { 100, 1, 43 }, { 100, 1, 42 }, { 100, 1, 41 }, { 42, 1, 153 } }, { { 25, 1, 18 }, { 6, 1, 154 }, { 5, 1, 155 }, { 5, 1, 156 }, { 5, 1, 157 }, { 4, 1, 158 }, { 5, 1, 159 }, { 5, 1, 160 }, { 5, 1, 74 }, { 12, 1, 53 }, { 12, 1, 52 }, { 3, 1, 161 } } };

extern "C" {


  EMSCRIPTEN_KEEPALIVE
  uint8_t * decodeFullReplays (
    uint32_t *buf,
    int nReplays
  ) {
    // And finally, to declare the buffer that will be pointed to when completely filled
    // uint8_t replays [nOuts*nReplays];
    std::vector<unsigned char> replays(nOuts*nReplays);
    int z = 0;
    for (int r=0;r<nReplays;r++) {
      for (int i=0;i<nInts;i++) {
        // HOLY CRAP THIS TOOK A LONG TIME TO FIGURE OUT.  IT WAS NEGATIVE BECAUSE I DIDN'T UNPACK IT AS USNIGNED
        unsigned int dataInt = buf[z++];
        dataInt = ((dataInt>>24)&0xff) | // move byte 3 to byte 0
                  ((dataInt<<8)&0xff0000) | // move byte 1 to byte 2
                  ((dataInt>>8)&0xff00) | // move byte 2 to byte 1
                  ((dataInt<<24)&0xff000000);

        for (int e=0;e<intLengths[i];e++) {
          int max = decoders[i][e][0];
          int mult = decoders[i][e][1];
          int out = decoders[i][e][2];
          int value = dataInt % max * mult;
          dataInt = dataInt / max;
          replays[r*nOuts+out] = value;
          }
        }
      }
    auto arrayPtr = &replays[0];
    return arrayPtr;
  }


}
